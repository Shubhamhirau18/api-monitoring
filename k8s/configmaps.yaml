apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: monitoring-system
  labels:
    app.kubernetes.io/name: monitoring-app
    app.kubernetes.io/part-of: brightedge-monitoring
    app.kubernetes.io/component: config
data:
  monitoring_config.yaml: |
    monitoring:
      interval_seconds: 30
      timeout_seconds: 10
      max_workers: 5
      verify_ssl: false
      outage_detection:
        consecutive_failures_threshold: 3
        degraded_threshold: 2
        recovery_success_threshold: 2
        failure_window_minutes: 10
        critical_outage_duration_minutes: 5
        timeout_as_failure: true
        http_5xx_as_failure: true
        http_4xx_as_failure: false

    endpoints:
      - name: "httpbin_get"
        url: "https://httpbin.org/get"
        method: "GET"
        expected_status: 200
        sla:
          availability_percentage: 99.9
          max_response_time_ms: 3500
        slo:
          max_avg_response_time_ms: 2000
          max_error_rate_percentage: 1.0
        validation:
          content_checks:
            - type: "json_key_exists"
              key: "url"
            - type: "json_key_value"
              key: "url"
              expected: "https://httpbin.org/get"

      - name: "httpbin_post"
        url: "https://httpbin.org/post"
        method: "POST"
        expected_status: 200
        headers:
          Content-Type: "application/json"
        body:
          test: "data"
          timestamp: "{{timestamp}}"
        sla:
          availability_percentage: 99.5
          max_response_time_ms: 4000
        slo:
          max_avg_response_time_ms: 2500
          max_error_rate_percentage: 2.0
        validation:
          content_checks:
            - type: "json_key_exists"
              key: "json"

      - name: "httpbin_delay"
        url: "https://httpbin.org/delay/2"
        method: "GET"
        expected_status: 200
        sla:
          availability_percentage: 95.0
          max_response_time_ms: 5000
        slo:
          max_avg_response_time_ms: 1500
          max_error_rate_percentage: 5.0

      - name: "httpbin_status_500"
        url: "https://httpbin.org/status/500"
        method: "GET"
        expected_status: 500
        sla:
          availability_percentage: 0.0
          max_response_time_ms: 3000
        slo:
          max_avg_response_time_ms: 2000
          max_error_rate_percentage: 100.0

      # Guaranteed to fail endpoint for demo purposes
      - name: "demo_alert_trigger"
        url: "https://httpbin.org/delay/5"
        method: "GET"
        expected_status: 200
        sla:
          availability_percentage: 99.9
          max_response_time_ms: 2000
        slo:
          max_avg_response_time_ms: 1000
          max_error_rate_percentage: 1.0

      - name: "google_health"
        url: "https://www.google.com" # Replace with your API
        method: "GET"
        expected_status: 200
        timeout_seconds: 5
        # headers:
        #   Authorization: "Bearer your-api-token" # If needed
        sla:
          availability_percentage: 99.9 # High availability requirement
          max_response_time_ms: 2000 # 2 second max response time
        slo:
          max_avg_response_time_ms: 1000 # 1 second average response time
          max_error_rate_percentage: 0.5 # 0.5% error rate
        # validation:
        #   content_checks:
        #     - type: "json_key_exists"
        #       key: "status"
        #     - type: "json_key_value"
        #       key: "status"
        #       expected: "ok"

    data_storage:
      type: "prometheus"
      prometheus:
        expose_port: 8080
        metrics_path: "/metrics"
        job_name: "api_monitoring"

    alerting:
      enabled: true
      max_repeats: 0
      repeat_interval_minutes: 5
      auto_resolve_after_hours: 24
      channels:
        - type: "console"
          enabled: true
        - type: "email"
          enabled: true
          smtp_server: "mailhog-service"
          smtp_port: 1025
          username: ""
          password: ""
          from_address: "oncall@monitoring.local"
          to_addresses: ["admin@monitoring.local", "devops@monitoring.local"]
          use_tls: false
          timezone: "UTC"

    reporting:
      dashboard_port: 8080
      metrics_retention_days: 30
      report_intervals:
        - "1h"
        - "24h"
        - "7d"
        - "30d"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring-system
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: brightedge-monitoring
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'kind-local'
        environment: 'development'

    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 5s

      - job_name: 'monitoring-app'
        static_configs:
          - targets: ['monitoring-service:8080']
        scrape_interval: 15s
        metrics_path: '/metrics'
        scrape_timeout: 10s

      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
